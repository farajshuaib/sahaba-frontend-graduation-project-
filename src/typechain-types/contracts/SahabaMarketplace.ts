/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SahabaMarketplace {
  export type CollectionsStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    createdBy: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    collaborators: PromiseOrValue<string>[];
  };

  export type CollectionsStructOutput = [
    BigNumber,
    string,
    string,
    string[]
  ] & {
    tokenId: BigNumber;
    createdBy: string;
    name: string;
    collaborators: string[];
  };

  export type MarketItemStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    mintedBy: PromiseOrValue<string>;
    currentOwner: PromiseOrValue<string>;
    previousOwner: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    platformFees: PromiseOrValue<BigNumberish>;
    collectionId: PromiseOrValue<BigNumberish>;
    numberOfTransfers: PromiseOrValue<BigNumberish>;
    isForSale: PromiseOrValue<boolean>;
  };

  export type MarketItemStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    tokenId: BigNumber;
    mintedBy: string;
    currentOwner: string;
    previousOwner: string;
    price: BigNumber;
    platformFees: BigNumber;
    collectionId: BigNumber;
    numberOfTransfers: BigNumber;
    isForSale: boolean;
  };
}

export interface SahabaMarketplaceInterface extends utils.Interface {
  functions: {
    "addCollaborators(uint256,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "buyToken(uint256)": FunctionFragment;
    "changeTokenPrice(uint256,uint256)": FunctionFragment;
    "collectionName()": FunctionFragment;
    "collectionNameSymbol()": FunctionFragment;
    "createAndListToken(string,uint256,uint256)": FunctionFragment;
    "createCollection(string,address[])": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCollection(uint256)": FunctionFragment;
    "getCollectionCollaborators(uint256)": FunctionFragment;
    "getMarketItem(uint256)": FunctionFragment;
    "getServiceFeesPrice()": FunctionFragment;
    "getTokenExists(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "removeCollaborators(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setServiceFeesPrice(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleForSale(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokenURIExists(string)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCollaborators"
      | "approve"
      | "balanceOf"
      | "burn"
      | "buyToken"
      | "changeTokenPrice"
      | "collectionName"
      | "collectionNameSymbol"
      | "createAndListToken"
      | "createCollection"
      | "getApproved"
      | "getCollection"
      | "getCollectionCollaborators"
      | "getMarketItem"
      | "getServiceFeesPrice"
      | "getTokenExists"
      | "isApprovedForAll"
      | "name"
      | "owner"
      | "ownerOf"
      | "removeCollaborators"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setServiceFeesPrice"
      | "supportsInterface"
      | "symbol"
      | "toggleForSale"
      | "tokenURI"
      | "tokenURIExists"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollaborators",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokenPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionNameSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAndListToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollection",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionCollaborators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceFeesPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenExists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollaborators",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFeesPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleForSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURIExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollaborators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionNameSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAndListToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionCollaborators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceFeesPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCollaborators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFeesPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenURIExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CollaboratorAdded(uint256,address)": EventFragment;
    "CollaboratorRemoved(uint256,address)": EventFragment;
    "CollectionCreated(uint256,address,string,address[])": EventFragment;
    "NFTCreated(uint256,uint256,address,string,uint256)": EventFragment;
    "NFTDeleted(uint256,address)": EventFragment;
    "NFTPriceChanged(uint256,uint256,uint256,address)": EventFragment;
    "NFTSold(uint256,uint256,address,address,uint256)": EventFragment;
    "NFT_Toggleed_Sale_Status(uint256,uint256,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ServiceFeesPriceChanged(uint256,uint256)": EventFragment;
    "SetNewNftPrice(uint256,address,uint256)": EventFragment;
    "SetNftPlatformFee(uint256,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferNftOwnership(uint256,address,address)": EventFragment;
    "TransferNftPriceToOwner(uint256,address,uint256)": EventFragment;
    "TransferPlatformFees(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollaboratorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollaboratorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFT_Toggleed_Sale_Status"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceFeesPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNewNftPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNftPlatformFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferNftOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferNftPriceToOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferPlatformFees"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CollaboratorAddedEventObject {
  collectionId: BigNumber;
  collaborator: string;
}
export type CollaboratorAddedEvent = TypedEvent<
  [BigNumber, string],
  CollaboratorAddedEventObject
>;

export type CollaboratorAddedEventFilter =
  TypedEventFilter<CollaboratorAddedEvent>;

export interface CollaboratorRemovedEventObject {
  collectionId: BigNumber;
  collaborator: string;
}
export type CollaboratorRemovedEvent = TypedEvent<
  [BigNumber, string],
  CollaboratorRemovedEventObject
>;

export type CollaboratorRemovedEventFilter =
  TypedEventFilter<CollaboratorRemovedEvent>;

export interface CollectionCreatedEventObject {
  collectionId: BigNumber;
  createdBy: string;
  name: string;
  collaborators: string[];
}
export type CollectionCreatedEvent = TypedEvent<
  [BigNumber, string, string, string[]],
  CollectionCreatedEventObject
>;

export type CollectionCreatedEventFilter =
  TypedEventFilter<CollectionCreatedEvent>;

export interface NFTCreatedEventObject {
  collectionId: BigNumber;
  nftId: BigNumber;
  createdBy: string;
  image: string;
  price: BigNumber;
}
export type NFTCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  NFTCreatedEventObject
>;

export type NFTCreatedEventFilter = TypedEventFilter<NFTCreatedEvent>;

export interface NFTDeletedEventObject {
  nftId: BigNumber;
  deletedBy: string;
}
export type NFTDeletedEvent = TypedEvent<
  [BigNumber, string],
  NFTDeletedEventObject
>;

export type NFTDeletedEventFilter = TypedEventFilter<NFTDeletedEvent>;

export interface NFTPriceChangedEventObject {
  nftId: BigNumber;
  prevPrice: BigNumber;
  newPrice: BigNumber;
  owner: string;
}
export type NFTPriceChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  NFTPriceChangedEventObject
>;

export type NFTPriceChangedEventFilter = TypedEventFilter<NFTPriceChangedEvent>;

export interface NFTSoldEventObject {
  collectionId: BigNumber;
  nftId: BigNumber;
  buyer: string;
  seller: string;
  price: BigNumber;
}
export type NFTSoldEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  NFTSoldEventObject
>;

export type NFTSoldEventFilter = TypedEventFilter<NFTSoldEvent>;

export interface NFT_Toggleed_Sale_StatusEventObject {
  collectionId: BigNumber;
  nftId: BigNumber;
  owner: string;
  isForSale: boolean;
}
export type NFT_Toggleed_Sale_StatusEvent = TypedEvent<
  [BigNumber, BigNumber, string, boolean],
  NFT_Toggleed_Sale_StatusEventObject
>;

export type NFT_Toggleed_Sale_StatusEventFilter =
  TypedEventFilter<NFT_Toggleed_Sale_StatusEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ServiceFeesPriceChangedEventObject {
  prevPrice: BigNumber;
  newPrice: BigNumber;
}
export type ServiceFeesPriceChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ServiceFeesPriceChangedEventObject
>;

export type ServiceFeesPriceChangedEventFilter =
  TypedEventFilter<ServiceFeesPriceChangedEvent>;

export interface SetNewNftPriceEventObject {
  nftId: BigNumber;
  owner: string;
  price: BigNumber;
}
export type SetNewNftPriceEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SetNewNftPriceEventObject
>;

export type SetNewNftPriceEventFilter = TypedEventFilter<SetNewNftPriceEvent>;

export interface SetNftPlatformFeeEventObject {
  nftId: BigNumber;
  owner: string;
  fee: BigNumber;
}
export type SetNftPlatformFeeEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SetNftPlatformFeeEventObject
>;

export type SetNftPlatformFeeEventFilter =
  TypedEventFilter<SetNftPlatformFeeEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferNftOwnershipEventObject {
  nftId: BigNumber;
  currentOwner: string;
  newOwner: string;
}
export type TransferNftOwnershipEvent = TypedEvent<
  [BigNumber, string, string],
  TransferNftOwnershipEventObject
>;

export type TransferNftOwnershipEventFilter =
  TypedEventFilter<TransferNftOwnershipEvent>;

export interface TransferNftPriceToOwnerEventObject {
  nftId: BigNumber;
  currentOwner: string;
  price: BigNumber;
}
export type TransferNftPriceToOwnerEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  TransferNftPriceToOwnerEventObject
>;

export type TransferNftPriceToOwnerEventFilter =
  TypedEventFilter<TransferNftPriceToOwnerEvent>;

export interface TransferPlatformFeesEventObject {
  nftId: BigNumber;
  amount: BigNumber;
}
export type TransferPlatformFeesEvent = TypedEvent<
  [BigNumber, BigNumber],
  TransferPlatformFeesEventObject
>;

export type TransferPlatformFeesEventFilter =
  TypedEventFilter<TransferPlatformFeesEvent>;

export interface SahabaMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SahabaMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      _collaborator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectionName(overrides?: CallOverrides): Promise<[string]>;

    collectionNameSymbol(overrides?: CallOverrides): Promise<[string]>;

    createAndListToken(
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCollection(
      _name: PromiseOrValue<string>,
      _collaborator: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCollection(
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SahabaMarketplace.CollectionsStructOutput]>;

    getCollectionCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getMarketItem(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SahabaMarketplace.MarketItemStructOutput]>;

    getServiceFeesPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenExists(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      _collaborator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setServiceFeesPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleForSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenURIExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addCollaborators(
    _collectionId: PromiseOrValue<BigNumberish>,
    _collaborator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTokenPrice(
    tokenId: PromiseOrValue<BigNumberish>,
    _newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectionName(overrides?: CallOverrides): Promise<string>;

  collectionNameSymbol(overrides?: CallOverrides): Promise<string>;

  createAndListToken(
    tokenURI: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    _collectionId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCollection(
    _name: PromiseOrValue<string>,
    _collaborator: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCollection(
    _collectionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SahabaMarketplace.CollectionsStructOutput>;

  getCollectionCollaborators(
    _collectionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMarketItem(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SahabaMarketplace.MarketItemStructOutput>;

  getServiceFeesPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenExists(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeCollaborators(
    _collectionId: PromiseOrValue<BigNumberish>,
    _collaborator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setServiceFeesPrice(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleForSale(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenURIExists(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      _collaborator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionName(overrides?: CallOverrides): Promise<string>;

    collectionNameSymbol(overrides?: CallOverrides): Promise<string>;

    createAndListToken(
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCollection(
      _name: PromiseOrValue<string>,
      _collaborator: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCollection(
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SahabaMarketplace.CollectionsStructOutput>;

    getCollectionCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMarketItem(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SahabaMarketplace.MarketItemStructOutput>;

    getServiceFeesPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenExists(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      _collaborator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setServiceFeesPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleForSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenURIExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "CollaboratorAdded(uint256,address)"(
      collectionId?: null,
      collaborator?: null
    ): CollaboratorAddedEventFilter;
    CollaboratorAdded(
      collectionId?: null,
      collaborator?: null
    ): CollaboratorAddedEventFilter;

    "CollaboratorRemoved(uint256,address)"(
      collectionId?: null,
      collaborator?: null
    ): CollaboratorRemovedEventFilter;
    CollaboratorRemoved(
      collectionId?: null,
      collaborator?: null
    ): CollaboratorRemovedEventFilter;

    "CollectionCreated(uint256,address,string,address[])"(
      collectionId?: null,
      createdBy?: null,
      name?: null,
      collaborators?: null
    ): CollectionCreatedEventFilter;
    CollectionCreated(
      collectionId?: null,
      createdBy?: null,
      name?: null,
      collaborators?: null
    ): CollectionCreatedEventFilter;

    "NFTCreated(uint256,uint256,address,string,uint256)"(
      collectionId?: null,
      nftId?: null,
      createdBy?: null,
      image?: null,
      price?: null
    ): NFTCreatedEventFilter;
    NFTCreated(
      collectionId?: null,
      nftId?: null,
      createdBy?: null,
      image?: null,
      price?: null
    ): NFTCreatedEventFilter;

    "NFTDeleted(uint256,address)"(
      nftId?: null,
      deletedBy?: null
    ): NFTDeletedEventFilter;
    NFTDeleted(nftId?: null, deletedBy?: null): NFTDeletedEventFilter;

    "NFTPriceChanged(uint256,uint256,uint256,address)"(
      nftId?: null,
      prevPrice?: null,
      newPrice?: null,
      owner?: null
    ): NFTPriceChangedEventFilter;
    NFTPriceChanged(
      nftId?: null,
      prevPrice?: null,
      newPrice?: null,
      owner?: null
    ): NFTPriceChangedEventFilter;

    "NFTSold(uint256,uint256,address,address,uint256)"(
      collectionId?: null,
      nftId?: null,
      buyer?: null,
      seller?: null,
      price?: null
    ): NFTSoldEventFilter;
    NFTSold(
      collectionId?: null,
      nftId?: null,
      buyer?: null,
      seller?: null,
      price?: null
    ): NFTSoldEventFilter;

    "NFT_Toggleed_Sale_Status(uint256,uint256,address,bool)"(
      collectionId?: null,
      nftId?: null,
      owner?: null,
      isForSale?: null
    ): NFT_Toggleed_Sale_StatusEventFilter;
    NFT_Toggleed_Sale_Status(
      collectionId?: null,
      nftId?: null,
      owner?: null,
      isForSale?: null
    ): NFT_Toggleed_Sale_StatusEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ServiceFeesPriceChanged(uint256,uint256)"(
      prevPrice?: null,
      newPrice?: null
    ): ServiceFeesPriceChangedEventFilter;
    ServiceFeesPriceChanged(
      prevPrice?: null,
      newPrice?: null
    ): ServiceFeesPriceChangedEventFilter;

    "SetNewNftPrice(uint256,address,uint256)"(
      nftId?: null,
      owner?: null,
      price?: null
    ): SetNewNftPriceEventFilter;
    SetNewNftPrice(
      nftId?: null,
      owner?: null,
      price?: null
    ): SetNewNftPriceEventFilter;

    "SetNftPlatformFee(uint256,address,uint256)"(
      nftId?: null,
      owner?: null,
      fee?: null
    ): SetNftPlatformFeeEventFilter;
    SetNftPlatformFee(
      nftId?: null,
      owner?: null,
      fee?: null
    ): SetNftPlatformFeeEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "TransferNftOwnership(uint256,address,address)"(
      nftId?: null,
      currentOwner?: null,
      newOwner?: null
    ): TransferNftOwnershipEventFilter;
    TransferNftOwnership(
      nftId?: null,
      currentOwner?: null,
      newOwner?: null
    ): TransferNftOwnershipEventFilter;

    "TransferNftPriceToOwner(uint256,address,uint256)"(
      nftId?: null,
      currentOwner?: null,
      price?: null
    ): TransferNftPriceToOwnerEventFilter;
    TransferNftPriceToOwner(
      nftId?: null,
      currentOwner?: null,
      price?: null
    ): TransferNftPriceToOwnerEventFilter;

    "TransferPlatformFees(uint256,uint256)"(
      nftId?: null,
      amount?: null
    ): TransferPlatformFeesEventFilter;
    TransferPlatformFees(
      nftId?: null,
      amount?: null
    ): TransferPlatformFeesEventFilter;
  };

  estimateGas: {
    addCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      _collaborator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectionName(overrides?: CallOverrides): Promise<BigNumber>;

    collectionNameSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    createAndListToken(
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCollection(
      _name: PromiseOrValue<string>,
      _collaborator: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollection(
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketItem(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceFeesPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenExists(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      _collaborator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setServiceFeesPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleForSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURIExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      _collaborator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectionName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionNameSymbol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAndListToken(
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCollection(
      _name: PromiseOrValue<string>,
      _collaborator: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollection(
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketItem(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceFeesPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenExists(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCollaborators(
      _collectionId: PromiseOrValue<BigNumberish>,
      _collaborator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setServiceFeesPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleForSale(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURIExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
