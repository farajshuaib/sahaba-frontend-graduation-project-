/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MarketEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "CollaboratorAdded(uint256,address)": EventFragment;
    "CollaboratorRemoved(uint256,address)": EventFragment;
    "CollectionCreated(uint256,address,string,address[])": EventFragment;
    "NFTCreated(uint256,uint256,address,string,uint256)": EventFragment;
    "NFTDeleted(uint256,address)": EventFragment;
    "NFTPriceChanged(uint256,uint256,uint256,address)": EventFragment;
    "NFTSold(uint256,uint256,address,address,uint256)": EventFragment;
    "NFT_Toggleed_Sale_Status(uint256,uint256,address,bool)": EventFragment;
    "ServiceFeesPriceChanged(uint256,uint256)": EventFragment;
    "SetNftPlatformFee(uint256,address,uint256)": EventFragment;
    "SetNftPrice(uint256,address,uint256)": EventFragment;
    "TransferNftOwnership(uint256,address,address)": EventFragment;
    "TransferNftPriceToOwner(uint256,address,uint256)": EventFragment;
    "TransferPlatformFees(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollaboratorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollaboratorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFT_Toggleed_Sale_Status"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceFeesPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNftPlatformFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNftPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferNftOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferNftPriceToOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferPlatformFees"): EventFragment;
}

export interface CollaboratorAddedEventObject {
  collectionId: BigNumber;
  collaborator: string;
}
export type CollaboratorAddedEvent = TypedEvent<
  [BigNumber, string],
  CollaboratorAddedEventObject
>;

export type CollaboratorAddedEventFilter =
  TypedEventFilter<CollaboratorAddedEvent>;

export interface CollaboratorRemovedEventObject {
  collectionId: BigNumber;
  collaborator: string;
}
export type CollaboratorRemovedEvent = TypedEvent<
  [BigNumber, string],
  CollaboratorRemovedEventObject
>;

export type CollaboratorRemovedEventFilter =
  TypedEventFilter<CollaboratorRemovedEvent>;

export interface CollectionCreatedEventObject {
  collectionId: BigNumber;
  createdBy: string;
  name: string;
  collaborators: string[];
}
export type CollectionCreatedEvent = TypedEvent<
  [BigNumber, string, string, string[]],
  CollectionCreatedEventObject
>;

export type CollectionCreatedEventFilter =
  TypedEventFilter<CollectionCreatedEvent>;

export interface NFTCreatedEventObject {
  collectionId: BigNumber;
  nftId: BigNumber;
  createdBy: string;
  image: string;
  price: BigNumber;
}
export type NFTCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  NFTCreatedEventObject
>;

export type NFTCreatedEventFilter = TypedEventFilter<NFTCreatedEvent>;

export interface NFTDeletedEventObject {
  nftId: BigNumber;
  deletedBy: string;
}
export type NFTDeletedEvent = TypedEvent<
  [BigNumber, string],
  NFTDeletedEventObject
>;

export type NFTDeletedEventFilter = TypedEventFilter<NFTDeletedEvent>;

export interface NFTPriceChangedEventObject {
  nftId: BigNumber;
  prevPrice: BigNumber;
  newPrice: BigNumber;
  owner: string;
}
export type NFTPriceChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  NFTPriceChangedEventObject
>;

export type NFTPriceChangedEventFilter = TypedEventFilter<NFTPriceChangedEvent>;

export interface NFTSoldEventObject {
  collectionId: BigNumber;
  nftId: BigNumber;
  buyer: string;
  seller: string;
  price: BigNumber;
}
export type NFTSoldEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  NFTSoldEventObject
>;

export type NFTSoldEventFilter = TypedEventFilter<NFTSoldEvent>;

export interface NFT_Toggleed_Sale_StatusEventObject {
  collectionId: BigNumber;
  nftId: BigNumber;
  owner: string;
  isForSale: boolean;
}
export type NFT_Toggleed_Sale_StatusEvent = TypedEvent<
  [BigNumber, BigNumber, string, boolean],
  NFT_Toggleed_Sale_StatusEventObject
>;

export type NFT_Toggleed_Sale_StatusEventFilter =
  TypedEventFilter<NFT_Toggleed_Sale_StatusEvent>;

export interface ServiceFeesPriceChangedEventObject {
  prevPrice: BigNumber;
  newPrice: BigNumber;
}
export type ServiceFeesPriceChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ServiceFeesPriceChangedEventObject
>;

export type ServiceFeesPriceChangedEventFilter =
  TypedEventFilter<ServiceFeesPriceChangedEvent>;

export interface SetNftPlatformFeeEventObject {
  nftId: BigNumber;
  owner: string;
  fee: BigNumber;
}
export type SetNftPlatformFeeEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SetNftPlatformFeeEventObject
>;

export type SetNftPlatformFeeEventFilter =
  TypedEventFilter<SetNftPlatformFeeEvent>;

export interface SetNftPriceEventObject {
  nftId: BigNumber;
  owner: string;
  price: BigNumber;
}
export type SetNftPriceEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SetNftPriceEventObject
>;

export type SetNftPriceEventFilter = TypedEventFilter<SetNftPriceEvent>;

export interface TransferNftOwnershipEventObject {
  nftId: BigNumber;
  currentOwner: string;
  newOwner: string;
}
export type TransferNftOwnershipEvent = TypedEvent<
  [BigNumber, string, string],
  TransferNftOwnershipEventObject
>;

export type TransferNftOwnershipEventFilter =
  TypedEventFilter<TransferNftOwnershipEvent>;

export interface TransferNftPriceToOwnerEventObject {
  nftId: BigNumber;
  currentOwner: string;
  price: BigNumber;
}
export type TransferNftPriceToOwnerEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  TransferNftPriceToOwnerEventObject
>;

export type TransferNftPriceToOwnerEventFilter =
  TypedEventFilter<TransferNftPriceToOwnerEvent>;

export interface TransferPlatformFeesEventObject {
  nftId: BigNumber;
  amount: BigNumber;
}
export type TransferPlatformFeesEvent = TypedEvent<
  [BigNumber, BigNumber],
  TransferPlatformFeesEventObject
>;

export type TransferPlatformFeesEventFilter =
  TypedEventFilter<TransferPlatformFeesEvent>;

export interface MarketEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "CollaboratorAdded(uint256,address)"(
      collectionId?: null,
      collaborator?: null
    ): CollaboratorAddedEventFilter;
    CollaboratorAdded(
      collectionId?: null,
      collaborator?: null
    ): CollaboratorAddedEventFilter;

    "CollaboratorRemoved(uint256,address)"(
      collectionId?: null,
      collaborator?: null
    ): CollaboratorRemovedEventFilter;
    CollaboratorRemoved(
      collectionId?: null,
      collaborator?: null
    ): CollaboratorRemovedEventFilter;

    "CollectionCreated(uint256,address,string,address[])"(
      collectionId?: null,
      createdBy?: null,
      name?: null,
      collaborators?: null
    ): CollectionCreatedEventFilter;
    CollectionCreated(
      collectionId?: null,
      createdBy?: null,
      name?: null,
      collaborators?: null
    ): CollectionCreatedEventFilter;

    "NFTCreated(uint256,uint256,address,string,uint256)"(
      collectionId?: null,
      nftId?: null,
      createdBy?: null,
      image?: null,
      price?: null
    ): NFTCreatedEventFilter;
    NFTCreated(
      collectionId?: null,
      nftId?: null,
      createdBy?: null,
      image?: null,
      price?: null
    ): NFTCreatedEventFilter;

    "NFTDeleted(uint256,address)"(
      nftId?: null,
      deletedBy?: null
    ): NFTDeletedEventFilter;
    NFTDeleted(nftId?: null, deletedBy?: null): NFTDeletedEventFilter;

    "NFTPriceChanged(uint256,uint256,uint256,address)"(
      nftId?: null,
      prevPrice?: null,
      newPrice?: null,
      owner?: null
    ): NFTPriceChangedEventFilter;
    NFTPriceChanged(
      nftId?: null,
      prevPrice?: null,
      newPrice?: null,
      owner?: null
    ): NFTPriceChangedEventFilter;

    "NFTSold(uint256,uint256,address,address,uint256)"(
      collectionId?: null,
      nftId?: null,
      buyer?: null,
      seller?: null,
      price?: null
    ): NFTSoldEventFilter;
    NFTSold(
      collectionId?: null,
      nftId?: null,
      buyer?: null,
      seller?: null,
      price?: null
    ): NFTSoldEventFilter;

    "NFT_Toggleed_Sale_Status(uint256,uint256,address,bool)"(
      collectionId?: null,
      nftId?: null,
      owner?: null,
      isForSale?: null
    ): NFT_Toggleed_Sale_StatusEventFilter;
    NFT_Toggleed_Sale_Status(
      collectionId?: null,
      nftId?: null,
      owner?: null,
      isForSale?: null
    ): NFT_Toggleed_Sale_StatusEventFilter;

    "ServiceFeesPriceChanged(uint256,uint256)"(
      prevPrice?: null,
      newPrice?: null
    ): ServiceFeesPriceChangedEventFilter;
    ServiceFeesPriceChanged(
      prevPrice?: null,
      newPrice?: null
    ): ServiceFeesPriceChangedEventFilter;

    "SetNftPlatformFee(uint256,address,uint256)"(
      nftId?: null,
      owner?: null,
      fee?: null
    ): SetNftPlatformFeeEventFilter;
    SetNftPlatformFee(
      nftId?: null,
      owner?: null,
      fee?: null
    ): SetNftPlatformFeeEventFilter;

    "SetNftPrice(uint256,address,uint256)"(
      nftId?: null,
      owner?: null,
      price?: null
    ): SetNftPriceEventFilter;
    SetNftPrice(
      nftId?: null,
      owner?: null,
      price?: null
    ): SetNftPriceEventFilter;

    "TransferNftOwnership(uint256,address,address)"(
      nftId?: null,
      currentOwner?: null,
      newOwner?: null
    ): TransferNftOwnershipEventFilter;
    TransferNftOwnership(
      nftId?: null,
      currentOwner?: null,
      newOwner?: null
    ): TransferNftOwnershipEventFilter;

    "TransferNftPriceToOwner(uint256,address,uint256)"(
      nftId?: null,
      currentOwner?: null,
      price?: null
    ): TransferNftPriceToOwnerEventFilter;
    TransferNftPriceToOwner(
      nftId?: null,
      currentOwner?: null,
      price?: null
    ): TransferNftPriceToOwnerEventFilter;

    "TransferPlatformFees(uint256,uint256)"(
      nftId?: null,
      amount?: null
    ): TransferPlatformFeesEventFilter;
    TransferPlatformFees(
      nftId?: null,
      amount?: null
    ): TransferPlatformFeesEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
